my_tree_five <- rpart(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title,data=train_new,method="class")
# Visualize your new decision tree
fancyRpartPlot(my_tree_five)
# Make your prediction using `my_tree_five` and `test_new`
my_prediction <- predict(my_tree_five,test_new,type="class")
# Create a data frame with two columns: PassengerId & Survived. Survived contains your predictions
my_solution <- data.frame(PassengerID=test_new$PassengerId,Survived=my_prediction)
# Write your solution away to a csv file with the name my_solution.csv
write.csv(my_solution,file="my_solution.csv",row.names=FALSE)
library("rpart", lib.loc="~/R/R-3.2.3/library")
library("RODBC", lib.loc="~/R/win-library/3.2")
test_na <- is.na(train$Age)
test_na
rm(test_na)
ls)()
ls()
M <- Matrix(1:6, nrow=4, ncol=3,
dimnames = list(c("a", "b", "c", "d"), c("A", "B", "C")))
stopifnot(all(!is.na(M)))
M[2:3,2] <- NA
M <- matrix(1:6, nrow=4, ncol=3,
dimnames = list(c("a", "b", "c", "d"), c("A", "B", "C")))
stopifnot(all(!is.na(M)))
M[2:3,2] <- NA
is.na(M)
# All data, both training and test set
all_data
# Passenger on row 62 and 830 do not have a value for embarkment.
# Since many passengers embarked at Southampton, we give them the value S.
all_data$Embarked[c(62, 830)] <- "S"
# Factorize embarkment codes.
all_data$Embarked <- factor(all_data$Embarked)
# Passenger on row 1044 has an NA Fare value. Let's replace it with the median fare value.
all_data$Fare[1044] <- median(all_data$Fare, na.rm = TRUE)
# How to fill in missing Age values?
# We make a prediction of a passengers Age using the other variables and a decision tree model.
# This time you give method = "anova" since you are predicting a continuous variable.
library(rpart)
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + family_size,
data = all_data[!is.na(all_data$Age),], method = "anova")
all_data$Age[is.na(all_data$Age)] <- predict(predicted_age, all_data[is.na(all_data$Age),])
# Split the data back into a train set and a test set
train <- all_data[1:891,]
test <- all_data[892:1309,]
is.na(all_data$Age)
all_data[!is.na(all_data$Age),]
!is.na(all_data$Age)
install.packages("rmr2")
download.packages('rmr2')
download.packages("rmr2")
install.packages("rmr2")
install.packages("mgcv", lib="C:/Users/gchandra003/Documents/R/R-3.2.3/library")
dose <- c(20, 30, 40, 45, 60)
drugA <- c(16, 20, 27, 40, 60)
drugB <- c(15, 18, 25, 31, 40)
dose <- c(20, 30, 40, 45, 60)
drugA <- c(16, 20, 27, 40, 60)
drugB <- c(15, 18, 25, 31, 40)
plot(dose, drugA, type="b")
load_all('C:/Program Files/R/R-3.2.3/library')
library('devtools')
load_all('C:/Program Files/R/R-3.2.3/library')
search()
library("base64enc", lib.loc="C:/Program Files/R/R-3.2.3/library")
library("yaml", lib.loc="C:/Program Files/R/R-3.2.3/library")
getwd()
date()
as.character(date())
as.character(date(),%YY)
as.character(date(),"%YY"")
q
""
as.character(date(),"%YY")
as.character(date(),"%Y")
search()
.Profile()
Rprofile
.libPaths()
manager <- c(1, 2, 3, 4, 5)
date <- c("10/24/08", "10/28/08", "10/1/08", "10/12/08", "5/1/09")
country <- c("US", "US", "UK", "UK", "UK")
gender <- c("M", "F", "F", "M", "F")
age <- c(32, 45, 25, 39, 99)
q1 <- c(5, 3, 3, 3, 2)
q2 <- c(4, 5, 5, 3, 2)
q3 <- c(5, 2, 5, 4, 1)
q4 <- c(5, 5, 5, NA, 2)
q5 <- c(5, 5, 2, NA, 1)
leadership <- data.frame(manager, date, country, gender, age,
q1, q2, q3, q4, q5, stringsAsFactors=FALSE)
order(leadership)
order(leadership$age)
newdata <- order(leadership$age)
str(newdata)
newdata <- order(leadership$manager)
str(newdata)
attach(leadership)
newdata <- leadership[order(gender, age),]
detach(leadership)
newddata
newdata
rm(newdata)
# Read in your data set and assign to the object:
present <- read.table("http://assets.datacamp.com/course/dasi/present.txt")
# This will print your data set in the console:
present
# The present data frame is already loaded.
# Print the number of rows and variables with the 'dim' function:
dim(present)
# Print the names of the variables of the data frame:
names(present)
options
help("options")
options(digits=2)
options(digits=2)
rnorm(2)
options(digits=3)
rnorm(2)
set.seed(12)
rnorm(2)
options(digits=3)
rnorm(2)
rnorm(2)
set.seed(2)
rnorm(2)
rnorm(2)
runif(2)
options(digits=2)
set.seed(2)
rnorm(2)
rnorm(2)
rnorm(2)
rnorm(2)
options(digits=1)
rnorm(2)
rnorm(2)
rnorm(2)
options(digits=2)
Student <- c("John Davis", "Angela Williams", "Bullwinkle Moose",
"David Jones", "Janice Markhammer", "Cheryl Cushing",
"Reuven Ytzrhak", "Greg Knox", "Joel England",
"Mary Rayburn")
Math <- c(502, 600, 412, 358, 495, 512, 410, 625, 573, 522)
Science <- c(95, 99, 80, 82, 75, 85, 80, 95, 89, 86)
English <- c(25, 22, 18, 15, 20, 28, 15, 30, 27, 18)
roster <- data.frame(Student, Math, Science, English,
stringsAsFactors=FALSE)
z <- scale(roster[,2:4])
score <- apply(z, 1, mean)
roster <- cbind(roster, score)
roster
Student <- c("John Davis", "Angela Williams", "Bullwinkle Moose",
"David Jones", "Janice Markhammer", "Cheryl Cushing",
"Reuven Ytzrhak", "Greg Knox", "Joel England",
"Mary Rayburn")
Math <- c(502, 600, 412, 358, 495, 512, 410, 625, 573, 522)
Science <- c(95, 99, 80, 82, 75, 85, 80, 95, 89, 86)
English <- c(25, 22, 18, 15, 20, 28, 15, 30, 27, 18)
roster <- data.frame(Student, Math, Science, English,
stringsAsFactors=FALSE)
rster
roster
scale(roster[,2:4])
d -< (9,10,8,5,10,1,7,2,3,4)
d <- (9,10,8,5,10,1,7,2,3,4)
d <- c(9,10,8,5,10,1,7,2,3,4)
mean(d)
sd(d)
install.packages("swirl")
library(swirl)
swirl()
install.packages("rafalib")
library(rafalib)
help(rafalib)
search()
version()
version
d <- c(2.23, 3.45, 1.87, 2.11, 7.33, 18.34, 19.23)
mean(d)
swirl()
swirl()
5+7
x <- 5 + 7
x
y <- x-3
y
z <-c(1.1, 9, 3.14)
c?
?
()
>c
?c
z
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3,
| 4)+c(0, 10)
c(1, 2, 3, 4)+c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.di <- getwd()
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files(getwd())
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
play()
file.info("mytest3.R")
file.path("mytest3.R")
file.path("folder1")
nxt()
file.path("folder1")
file.path("folder1", "folder2")
?dir.create
dir.create("testdir/testdir2/testdir3",recursive = TRUE)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2",recursive = TRUE)
setwd(old.dir)
unlink("testdir",recursive = TRUE)
main()
swirl()
play()
main()
info()
main()
info()
nxt()
play()
swirl()
nxt()
bye()
swirl()
library("swirl")
list(ls())
ls()
rm(ls())
lst <- ls()
lst
rm(lst)
lst <- ls()
c(lst)
rm(c(lst))
rm(list=ls())
swirl()
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
play()
rep(1)
rep(1,2)
rep(1,40)
nxt()
rep(c(0, 1, 2),10)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c( 0.5, 55, -10,6)
tf <- num_vect < 1
tf
num_vect >= 6
play()
cost <- c(1049,1154,1154,1879)
cost <- union(cost,c(1364))
cost
length(cost)
cost <- c(1049,1154,1154,1879)
length(cost)
cost <- union(cost,c(1364))
length(cost)
cost <- c(1049,1154,1154,1879,1364)
cost
cashback <- c(450,495,495,810,585)
finalc <- cost-cashback
finalc
sum(finalc)
sum(cost)
sum(cashback)
append(1:5, 0:1, after = 3)
nxt()
c("My", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char,"Valaravaus")
my_name <- c(my_char,"Valaravaus")
my_name
paste(my_name,collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X", "Y","Z"),sep="")
paste(LETTERS, 1:4, sep = "-")
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
bye
bye()
swirl()
swirl()
1:20
play()
help("wirl")
help("swirl")
main()
swirl()
install_from_swirl("Data Analysis")
swirl()
bye()
libary(swirl)
library("swirl")
swirl()
bye()
swirl()
getwd()
.libPaths()
bye()
.libPaths()
if(!require(installr)) {
install.packages("installr"); require(installr)}
update.packages("installr")
updateR()
updateR()
updateR()
if(!require(installr)) {
install.packages("installr"); require(installr)}
updateR()
Rgui
remove.packages("installr")
remove.packages("installr",lib = "C:/Program Files/R/R-3.2.3/library")
.libPaths("C:\Users\BEAR\Documents\valearn\RData")
.libPaths()
.libPaths(.libPaths()[1])
.libPaths()
.libPaths(c(.libPaths())[]1)
.libPaths(c(.libPaths())[1])
.libPaths()
.libPaths()
.libPaths()
.libPaths(.libPaths()[1])
.libPaths()
R.home()
.libPaths()
.libPaths()
.libPaths()
.libPaths(.libPaths()[1])
.libPaths()
getwd()
library()
.libPaths()
.libPaths()
.libPaths()
install.packages("installr")
library("installr")
updateR()
install.packages("swirl")
swirl()
library("swirl")
swirl()
swirl()
install_from_swirl("Data_Analysis")
install_from_swirl("Regression_Models")
install_from_swirl("Statistical_Inference")
swirl()
x<-c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
bye()
for (i in 1:10) print("Hello")
i <- 10
while (i > 0) {print("Hello") i <- i - 1}
i <- 10
while (i > 0) {print("Hello") ;i <- i - 1}
install.packages("vcd")
library("vcf")
library("vcd")
Arthritis
counts <- table(Arthritis$Improved,Arthritis$Treatment)
countss
counts
plot(Arthritis$Improved, main="Simple Bar Plot",
xlab="Improved", ylab="Frequency")
barplot(counts,
main="Stacked Bar Plot",
xlab="Treatment", ylab="Frequency",
col=c("red", "yellow","green"),
legend=rownames(counts))
?paste
par(mfrow=c(2, 2))
slices <- c(10, 12,4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pie(slices, labels = lbls,
main="Simple Pie Chart")
pct <- round(slices/sum(slices)*100)
lbls2 <- paste(lbls, " ", pct, "%", sep="")
pie(slices, labels=lbls2, col=rainbow(length(lbls2)),
main="Pie Chart with Percentages")
?par
par()
mytable <- table(state.region)
mytable
lbls3 <- paste(names(mytable), "\n", mytable, sep="")
paste(names(mytable)
names(mytable)
lbls3
mytable
paste0(names(mytable), "\n", mytable, sep="",collapse = TRUE)
paste0(names(mytable), "\n", mytable, sep="",collapse = ":")
pie(mytable, labels = lbls3,
main="Pie Chart from a Table\n (with sample sizes)")
library(plotrix)
pie3D(slices, labels=lbls,explode=0.1,
main="3D Pie Chart ")
slices <- c(10, 12,4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
fan.plot(slices, labels = lbls, main="Fan Plot")
hist(mtcars$mpg)
rug(jitter(mtcars$mpg))
rug(jitter(mtcars$mpg))
lines(density(mtcars$mpg), col="blue", lwd=2)
hist(mtcars$mpg,
freq=FALSE,
breaks=12,
col="red",
xlab="Miles Per Gallon",
main="Histogram, rug plot, density curve")
rug(jitter(mtcars$mpg))
lines(density(mtcars$mpg), col="blue", lwd=2)
hist(mtcars$mpg,
freq=FALSE,
breaks=12,
col="red",
xlab="Miles Per Gallon",
main="Histogram, rug plot, density curve")
rug(jitter(mtcars$mpg))
x <- mtcars$mpg
h<-hist(x,
breaks=12,
col="red",
xlab="Miles Per Gallon",
main="Histogram with normal curve and box")
xfit<-seq(min(x), max(x), length=40)
xift
xfit
?dnorm
d <- density(mtcars$mpg)
d
plot(d)
polygon(d, col="red", border="blue")
cost <- (1364,1879,1154,1154,1049,1104,1779,1679,1779,1416,1049,1049,2204,1729,1374,1628,1049)
cost <- c(1364,1879,1154,1154,1049,1104,1779,1679,1779,1416,1049,1049,2204,1729,1374,1628,1049)
cost <- c(1364,1879,1154,1154,1049,1104,1779,1779,1416,1049,1049,2204,1729,1374,1628,1049)
cashback <- c(585,810,495,495,450,105,595,850,675,350,350,1062,660,620,530,400)
pay <- cost-cashback
pay
sum(pay)
sum(cost) - sum(cashback)
sum(cost)
sum(cashback)
library("vcd")
Arthritis
summary(Arthritis)
