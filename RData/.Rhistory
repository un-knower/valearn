load("~/RData/.RData")
printcp(my_prediction)
library(rpart)
printcp(my_prediction)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
printcp(my_prediction)
printcp(my_tree)
my_tree_three <- rpart(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked,data=train,method="class",minsplit=50,cp=0)
fancyRpartPlot(my_tree_three)
help(rpart)
my_tree_three <- rpart(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked,data=train,method="class",rpart.control(minsplit=50,cp=0))
my_tree_three <- rpart(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked,data=train,method="class",control=rpart.control(minsplit=50,cp=0))
fancyRpartPlot(my_tree_three)
# Your train and test set are still loaded in
str(train)
str(test)
# create a new train set with the new variable
train_two <- train
train_two$family_size <- train_two$SibSp+train_two$Parch+1
# Create a new decision tree my_tree_three
my_tree_four <- rpart(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+family_size,data=train,method="class",control=rpart.control(minsplit=50,cp=0))
# Visualize your new decision tree
fancyRpartPlot(my_tree_four)
# Your train and test set are still loaded in
str(train)
str(test)
# create a new train set with the new variable
train_two <- train
train_two$family_size <- train_two$SibSp+train_two$Parch+1
# Create a new decision tree my_tree_three
my_tree_four <- rpart(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+family_size,data=train_two,method="class",control=rpart.control(minsplit=50,cp=0))
# Visualize your new decision tree
fancyRpartPlot(my_tree_four)
fancyRpartPlot(my_tree_four)
library("rpart", lib.loc="C:/Program Files/R/R-3.2.3/library")
library("rpart.plot", lib.loc="C:/Program Files/R/R-3.2.3/library")
library("rattle", lib.loc="C:/Program Files/R/R-3.2.3/library")
library("RColorBrewer", lib.loc="C:/Program Files/R/R-3.2.3/library")
fancyRpartPlot(my_tree_four)
help(jpeg)
jpeg(filename="plotjpg",fancyRpartPlot(my_tree_four))
jpeg(filename="plot.jpg",fancyRpartPlot(my_tree_four))
jpeg(filename="plot1.jpg",fancyRpartPlot(my_tree_four))
help(jpeg)
jpeg("plot.jpg")
fancyRpartPlot(my_tree_four)
dev.off()
libPaths()
libpath()
libPaths()
pwd()
wd()
getwd()
.libPaths()
search()
update.packages(installed.packages())
update.packages(installed.packages())
library()
summary(train)
my_prediction_two <- predict(my_tree_two,data=train,method="class")
summry(my_prediction_two)
summary(my_prediction_two)
str(my_prediction_two)
my_solution <-data.frame(PassengerId=test$PassengerId,Survived=my_prediction_two)
my_solution <-data.frame(PassengerId=train$PassengerId,Survived=my_prediction_two)
load(all_date)
load(all_data)
load("all_data.RData")
View(all_data)
# All data, both training and test set
all_data
# Passenger on row 62 and 830 do not have a value for embarkment.
# Since many passengers embarked at Southampton, we give them the value S.
all_data$Embarked[c(62, 830)] <- "S"
# Factorize embarkment codes.
all_data$Embarked <- factor(all_data$Embarked)
# Passenger on row 1044 has an NA Fare value. Let's replace it with the median fare value.
all_data$Fare[1044] <- median(all_data$Fare, na.rm = TRUE)
# How to fill in missing Age values?
# We make a prediction of a passengers Age using the other variables and a decision tree model.
# This time you give method = "anova" since you are predicting a continuous variable.
library(rpart)
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + family_size,
data = all_data[!is.na(all_data$Age),], method = "anova")
all_data$Age[is.na(all_data$Age)] <- predict(predicted_age, all_data[is.na(all_data$Age),])
# Split the data back into a train set and a test set
train <- all_data[1:891,]
test <- all_data[892:1309,]
getwd()
setwd("~/RData")
q()
updateR()
RUpdate()
search(Rupdate)
# train_new and test_new are available in the workspace
str(train_new)
str(test_new)
write.csv(train_new,file="train_new.csv",row.names=FALSE)
write.csv(test_new,file="test_new.csv",row.names=FALSE)
# Create a new model `my_tree_five`
my_tree_five <- rpart(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title,data=train_new,method="class")
# Visualize your new decision tree
fancyRpartPlot(my_tree_five)
# Make your prediction using `my_tree_five` and `test_new`
my_prediction <- predict(my_tree_five,test_new,type="class")
# Create a data frame with two columns: PassengerId & Survived. Survived contains your predictions
my_solution <- data.frame(PassengerID=test_new$PassengerId,Survived=my_prediction)
# Write your solution away to a csv file with the name my_solution.csv
write.csv(my_solution,file="my_solution.csv",row.names=FALSE)
library("rpart", lib.loc="~/R/R-3.2.3/library")
library("RODBC", lib.loc="~/R/win-library/3.2")
test_na <- is.na(train$Age)
test_na
rm(test_na)
ls)()
ls()
M <- Matrix(1:6, nrow=4, ncol=3,
dimnames = list(c("a", "b", "c", "d"), c("A", "B", "C")))
stopifnot(all(!is.na(M)))
M[2:3,2] <- NA
M <- matrix(1:6, nrow=4, ncol=3,
dimnames = list(c("a", "b", "c", "d"), c("A", "B", "C")))
stopifnot(all(!is.na(M)))
M[2:3,2] <- NA
is.na(M)
# All data, both training and test set
all_data
# Passenger on row 62 and 830 do not have a value for embarkment.
# Since many passengers embarked at Southampton, we give them the value S.
all_data$Embarked[c(62, 830)] <- "S"
# Factorize embarkment codes.
all_data$Embarked <- factor(all_data$Embarked)
# Passenger on row 1044 has an NA Fare value. Let's replace it with the median fare value.
all_data$Fare[1044] <- median(all_data$Fare, na.rm = TRUE)
# How to fill in missing Age values?
# We make a prediction of a passengers Age using the other variables and a decision tree model.
# This time you give method = "anova" since you are predicting a continuous variable.
library(rpart)
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + family_size,
data = all_data[!is.na(all_data$Age),], method = "anova")
all_data$Age[is.na(all_data$Age)] <- predict(predicted_age, all_data[is.na(all_data$Age),])
# Split the data back into a train set and a test set
train <- all_data[1:891,]
test <- all_data[892:1309,]
is.na(all_data$Age)
all_data[!is.na(all_data$Age),]
!is.na(all_data$Age)
install.packages("rmr2")
download.packages('rmr2')
download.packages("rmr2")
install.packages("rmr2")
install.packages("mgcv", lib="C:/Users/gchandra003/Documents/R/R-3.2.3/library")
dose <- c(20, 30, 40, 45, 60)
drugA <- c(16, 20, 27, 40, 60)
drugB <- c(15, 18, 25, 31, 40)
dose <- c(20, 30, 40, 45, 60)
drugA <- c(16, 20, 27, 40, 60)
drugB <- c(15, 18, 25, 31, 40)
plot(dose, drugA, type="b")
